@inject IProductService ProductService
@implements IDisposable

@if (ProductService.Products is null || ProductService.Products.Count == 0)
{
    <span>Loading products list...</span>
}
else 
{
    <ul class="unstyled-list">
        @foreach(var product in ProductService.Products)
        {
            <div class="media my-3">
                <div class="media-img-wrapper mr-2">
                    <a href="/product/@product.Id">
                        <img class="media-img" src=@product.ImageUrl alt=@product.Title/>
                    </a>
                </div>
                <div class="media-body">
                    <a href="/product/@product.Id">
                        <h4 class="mb-0">@product.Title</h4>
                    </a>
                    <p>@product.Description</p>
                    <h5 class="price">
                        @GetPriceText(product)
                    </h5>
                </div>
            </div>
        }
    </ul>
    @for (var i = 1; i <= ProductService.PageCount; i++)
    {
        <a class="btn
                @(i == ProductService.CurrentPage ? "btn-info" : "btn-outline-info")
                page-selection"
            href="/search/@ProductService.LastSearchText/@i">
        @i
        </a>
    }
}

@code {    
    protected override void OnInitialized()
    {
        ProductService.ProductListChanged += StateHasChanged;
    }

    public void Dispose()
    {
        ProductService.ProductListChanged -= StateHasChanged;
    }

    private string GetPriceText(Product product)
    {
        var variants = product.Variants;

        if (variants.Count == 0) return string.Empty;
        else if (variants.Count == 1) return $"DZD {variants[0].Price}";
        else return $"Starting at DZD {variants.Min(v => v.Price)}";
    }
}