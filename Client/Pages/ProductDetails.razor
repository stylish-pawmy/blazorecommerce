@page "/product/{id:int}"
@inject IProductService ProductService
@inject ICartService CartService

@if (Product == null) {
    <h3>Product Loading...</h3>
}
else {
    <div class="media my-3">
        <div class="media-img-wrapper mr-2">
            <img class="media-img" src=@Product.ImageUrl alt=@Product.Title/>
        </div>
        <div class="media-body">
            <h4 class="mb-0">@Product.Title</h4>
            <p>@Product.Description</p>
            @if (Product.Variants.Count > 0)
            {
                <div class="mb-3">
                    <select class="form-select" @bind=currentTypeId>
                        @foreach (var variant in Product.Variants)
                        {
                            <option value=@variant.ProductTypeId>@variant.ProductType.Name</option>
                        }
                    </select>
                </div>
            }
            @if (GetSelectedVariant() != null)
            {
                @if (GetSelectedVariant().OriginalPrice > GetSelectedVariant().Price)
                {
                    <h6 class="text-muted original-price">
                        DZD @GetSelectedVariant().OriginalPrice
                    </h6>
                }
            }
            <h4 class="price">
                DZD @GetSelectedVariant().Price
            </h4>
            <button class="btn btn-primary" @onclick="AddToCart">
                <i class="oi oi-cart"></i>&nbsp;&nbsp;&nbsp;Add to Cart
            </button>
        </div>
    </div>
}

@code {
    private int currentTypeId = 1;
    private Product? Product = null;
    private string? message = null;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        message = "Loading Data";
        var response = await ProductService.GetProduct(Id);

        if (!response.Success)
        {
            message = response.Message;
        }
        else {
            Product = response.Data;
            if (Product.Variants.Count > 0)
            {
                currentTypeId = Product.Variants[0].ProductTypeId;
            }
        }

    }

    private ProductVariant GetSelectedVariant()
    {
        var variant = Product.Variants.FirstOrDefault(v => v.ProductTypeId == currentTypeId);
        return variant;
    }

    private async Task AddToCart()
    {
        var variant = GetSelectedVariant();
        var item = new CartItem {
            ProductId = variant.ProductId,
            ProductTypeId = variant.ProductTypeId
        };

        await CartService.AddToCart(item);
    } 

}

