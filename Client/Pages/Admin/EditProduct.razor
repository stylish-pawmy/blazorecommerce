@page "/admin/product/{productId:int}"
@page "/admin/prodcut"

@inject IProductService ProductService
@inject ICategoryService CategoryService
@inject IProductTypeService ProductTypeService
@inject NavigationManager NavigationManager

@if (loading)
{
    <span>Loading...</span>
} else {
    @if (product.Editing)
    {
        <h3>Edit product</h3>
    } else if (product.IsNew) {
        <h3>Create a new product</h3>
    }

    <EditForm Model="product" OnValidSubmit="AddOrUpdateProduct">
        <DataAnnotationsValidator />
        <div class="mb-0">
            <lable for="title">Title</lable>
            <InputText id="title" class="form-control" @bind-Value="product.Title" />
        </div>
        <div class="mb-0">
            <lable for="image-url">Image Url</lable>
            <InputText id="imgae-url" class="form-control" @bind-Value="product.ImageUrl" />
        </div>
        <div class="mb-0">
            <img src=@product.ImageUrl />
        </div>
        <div class="mb-0">
            <lable for="description">Description</lable>
            <InputTextArea id="description" class="form-control" @bind-Value="product.Description" />
        </div>
        <hr />
        <div class="header">
            <div class="col">Product Type / Variant</div>
            <div class="col">Price</div>
            <div class="col">Original Price</div>
            <div class="col">Visible</div>
            <div class="col"></div>
        </div>
        @foreach(var variant in product.Variants)
        {
            <div clas="row">
                <div class="col">
                    <InputSelect disabled=@variant.Deleted @bind-Value=@variant.ProductTypeId class="form-control">
                        @foreach (var productType in ProductTypeService.ProductTypes)
                        {
                            <option value=@productType.Id.ToString()>@productType.Name</option>
                        }
                    </InputSelect>
                </div>
                <div class="col">
                    <InputNumber @bind-Value="variant.Price" class="form-control" disabled="@variant.Deleted" />
                </div>
                <div class="col">
                    <InputNumber @bind-Value="variant.OriginalPrice" class="form-control" disabled="@variant.Deleted" />
                </div>
                <div class="col col-visible">
                    <InputCheckbox @bind-Value="variant.Visible" style="transform: scale(1.5, 1.5)" class="form-check-input" disabled="@variant.Deleted" />
                </div>
                <div class="col">
                    <button class="btn btn-primary" disabled="@variant.Deleted"
                        @onclick="@(() => RemoveVariant(variant.ProductTypeId))">
                        <i class="oi oi-trash"></i>
                    </button>
                </div>
            </div>
        }
        <button class="btn btn-primary" @onclick="AddVariant">
            <i class="oi oi-plus"></i> Add variant
        </button>
        <hr />
        <div class="mb-0">
            <label for="category">Category</label>
            <InputSelect id="category" @bind-Value="product.CategoryId" class="form-control">
                @foreach (var category in CategoryService.Categories)
                {
                    <option value=@category.Id>@category.Name</option>
                }
            </InputSelect>
        </div>
        <hr />
        <div class="form-check">
            <InputCheckbox id="featured" @bind-Value="product.Featured" class="form-check-input" />
            <label for="featured" class="form-check-label">Featured</label>
        </div>
        <div class="form-check">
            <InputCheckbox id="visible" @bind-Value="product.Visible" class="form-check-input" />
            <label for="visible" class="form-check-label">Visible</label>
        </div>
        <hr />
        <button type="submit" class="btn btn-primary float-end">@btnText</button>
        <ValidationSummary />
    </EditForm>
}

@code {
    [Parameter]
    int productId {get; set;}
    Product? product {get; set;} = null;
    bool loading {get; set;} = true;
    string? btnText {get; set;} = "Create";
    string? msg {get; set;} = "Loading...";

    protected override async Task OnInitializedAsync()
    {
        await ProductTypeService.GetProductTypes();
        await CategoryService.GetAdminCategories();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (productId == 0)
        {
            product = new Product() {IsNew = true};
            btnText = "Create product";
        } else {
            Product dbProduct = (await ProductService.GetProduct(productId)).Data;

            if (dbProduct is null)
                msg = "Product not found";

            product = dbProduct;
            product.Editing = true;
            btnText = "Update product";
        }

        loading = false;
    }

    void RemoveVariant(int productTypeId)
    {
        var variant = product.Variants.Find(v => v.ProductTypeId == productTypeId);
        if (variant == null)
        {
            return;
        }
        if (variant.IsNew)
        {
            product.Variants.Remove(variant);
        } else {
            variant.Deleted = true;
        }
    }

    void AddVariant()
    {
        product.Variants
            .Add(new ProductVariant {IsNew = true, ProductId = product.Id });
    }
}