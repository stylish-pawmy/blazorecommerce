@page "/cart"
@inject ICartService CartService
@inject IOrderService OrderService

<PageTitle>Cart</PageTitle>
<h3>Shopping Cart</h3>
@if (cartProducts == null || cartProducts.Count == 0)
{
    <span>@message</span>
}
else {
    <div>
        @foreach (var product in cartProducts)
        {
            <div class="container">
                <div class="image-wrapper">
                    <img src="@product.ImageUrl" class="image" />
                </div>
                <div class="name">
                    <h5><a href="/product/@product.ProductId">@product.Title</a></h5>
                    <span>@product.ProductType</span><br />
                    <input type="text"
                       value="@product.Quantity"
                       @onchange="((ChangeEventArgs e) => UpdateProductCount(e, product))"
                       class="form-control input-quantity"
                       min="1"
                       />
                    <button class="remove-button" @onclick="@(() =>
                        RemoveProductFromCart(@product.ProductId, @product.ProductTypeId))">
                        Delete
                    </button>
                </div>
                <div class="cart-product-price">DZD @(product.Price * product.Quantity)</div>
            </div>
        }
        <div class="cart-product-price">
            Total @cartProducts.Count: DZD @cartProducts.Sum(product => product.Price * product.Quantity)
        </div>
        <button @onclick="PlaceOrder" class="btn alert-success mt-1 float-end">Place Order</button>
    </div>
}

@code 
{
    List<CartProductResponse>? cartProducts { get; set; } = null;
    string message = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task RemoveProductFromCart(int productId, int productTypeId)
    {
        await CartService.RemoveProductFromCart(productId, productTypeId);
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        await CartService.GetCartCount();
        cartProducts = await CartService.GetCartProducts();
        if (cartProducts.Count == 0 || cartProducts is null)
            message = "Cart is empty ...";
    }

    private async Task UpdateProductCount(ChangeEventArgs e, CartProductResponse product)
    {
        product.Quantity = int.Parse(e.Value.ToString());
        if (product.Quantity < 1) product.Quantity = 1;
        
        await CartService.UpdateProductQuantity(product);
    }

    private async Task PlaceOrder()
    {
        await OrderService.PlaceOrder();
    }
}